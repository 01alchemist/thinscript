declare function string_length(text: string): int;
declare function string_get(text: string, index: int): int;
declare function string_equals(a: string, b: string): bool;
declare function string_slice(text: string, start: int, end: int): string;

declare function StringBuilder_appendChar(a: string, b: ubyte): string;
declare function StringBuilder_append(a: string, b: string): string;

class StringBuilder {
  next: StringBuilder;
  _text: string;

  clear(): void {
    this._text = "";
  }

  appendChar(c: ubyte): StringBuilder {
    this._text = StringBuilder_appendChar(this._text, c);
    return this;
  }

  appendSlice(text: string, start: int, end: int): StringBuilder {
    this._text = StringBuilder_append(this._text, string_slice(text, start, end));
    return this;
  }

  append(text: string): StringBuilder {
    this._text = StringBuilder_append(this._text, text);
    return this;
  }

  // This also "frees" this object (puts it back in the pool)
  finish(): string {
    this.next = stringBuilderPool;
    stringBuilderPool = this;
    return this._text;
  }
}
