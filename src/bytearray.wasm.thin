function ByteArray_setString(array: ByteArray, index: int, text: string): void {
  unsafe {
    var length = (text as UIntPtr).value;
    assert(index >= 0 && index + length as int <= array.length());
    memcpy(array._data + index as uint, text as uint + 4, length);
  }
}

class ByteArray {
  _data: uint;
  _length: uint;
  _capacity: uint;

  length(): int {
    return this._length as int;
  }

  clear(): void {
    this._length = 0;
  }

  get(index: int): ubyte {
    assert((index as uint) < this._length);
    unsafe {
      return ((this._data as int + index) as UBytePtr).value;
    }
  }

  set(index: int, value: ubyte): void {
    assert((index as uint) < this._length);
    unsafe {
      ((this._data as int + index) as UBytePtr).value = value;
    }
  }

  append(value: ubyte): void {
    var offset = this._length;
    unsafe {
      this.resize(offset as int + 1);
      ((this._data + offset) as UBytePtr).value = value;
    }
  }

  resize(length: int): void {
    if (length as uint > this._capacity) {
      unsafe {
        var capacity = length as uint * 2;
        var data = malloc(capacity);
        memcpy(data, this._data, this._length);
        this._capacity = capacity;
        this._data = data;
      }
    }

    this._length = length as uint;
  }
}
