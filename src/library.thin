function library(): string {
  return `
declare class bool {}
declare class byte {}
declare class int {}
declare class sbyte {}
declare class short {}
declare class string {}
declare class uint {}
declare class ushort {}

#if WASM
  // Cast to these to read from and write to arbitrary locations in memory
  unsafe class BytePtr { value: byte; }
  unsafe class UShortPtr { value: ushort; }
  unsafe class UIntPtr { value: uint; }

  // These will be filled in by the WebAssembly code generator
  unsafe var currentHeapPointer: uint = 0;
  unsafe var originalHeapPointer: uint = 0;

  unsafe function malloc(sizeOf: uint): uint {
    // Align all allocations to 8 bytes
    var offset = (currentHeapPointer + 7) & ~7 as uint;
    sizeOf = (sizeOf + 7) & ~7 as uint;

    // Use a simple bump allocator for now
    var limit = offset + sizeOf;
    currentHeapPointer = limit;

    // Make sure the memory starts off at zero
    var ptr = offset;
    while (ptr < limit) {
      (ptr as UIntPtr).value = 0;
      ptr = ptr + 4;
    }

    return offset;
  }
#endif
`;
}
