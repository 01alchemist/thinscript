enum FindNested {
  NORMAL,
  ALLOW_INSTANCE_ERRORS,
}

class Scope {
  parent: Scope;
  symbol: Symbol;
  firstSymbol: Symbol;
  lastSymbol: Symbol;

  findLocal(name: string): Symbol {
    var symbol = this.firstSymbol;
    while (symbol != null) {
      if (string_equals(symbol.name, name)) {
        return symbol;
      }
      symbol = symbol.next;
    }
    return null;
  }

  findNested(name: string, mode: FindNested): Symbol {
    var scope = this;
    while (scope != null) {
      if (scope.symbol == null || scope.symbol.kind != SymbolKind.TYPE_CLASS || mode == FindNested.ALLOW_INSTANCE_ERRORS) {
        var local = scope.findLocal(name);
        if (local != null) {
          return local;
        }
      }
      scope = scope.parent;
    }
    return null;
  }

  define(log: Log, symbol: Symbol): bool {
    var existing = this.findLocal(symbol.name);
    if (existing != null) {
      log.error(symbol.range, StringBuilder_new()
        .append("Duplicate symbol '")
        .append(symbol.name)
        .append("'")
        .finish());
      return false;
    }

    if (this.firstSymbol == null) this.firstSymbol = symbol;
    else this.lastSymbol.next = symbol;
    this.lastSymbol = symbol;

    return true;
  }

  defineNativeType(log: Log, name: string, byteSizeAndMaxAlignment: int): Type {
    var symbol = new Symbol();
    symbol.kind = SymbolKind.TYPE_NATIVE;
    symbol.name = name;
    symbol.byteSize = byteSizeAndMaxAlignment;
    symbol.maxAlignment = byteSizeAndMaxAlignment;
    symbol.resolvedType = new Type();
    symbol.resolvedType.symbol = symbol;
    symbol.state = SymbolState.INITIALIZED;
    this.define(log, symbol);
    return symbol.resolvedType;
  }

  defineNativeIntegerType(log: Log, name: string, byteSizeAndMaxAlignment: int, isUnsigned: bool): Type {
    var type = this.defineNativeType(log, name, byteSizeAndMaxAlignment);
    type.symbol.flags = isUnsigned ? SYMBOL_FLAG_NATIVE_INTEGER | SYMBOL_FLAG_IS_UNSIGNED : SYMBOL_FLAG_NATIVE_INTEGER;
    return type;
  }
}
