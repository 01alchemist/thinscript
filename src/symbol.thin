enum SymbolKind {
  TYPE_CLASS,
  TYPE_ENUM,
  TYPE_GLOBAL,
  TYPE_NATIVE,

  FUNCTION_INSTANCE,
  FUNCTION_GLOBAL,

  VARIABLE_ARGUMENT,
  VARIABLE_CONSTANT,
  VARIABLE_GLOBAL,
  VARIABLE_INSTANCE,
  VARIABLE_LOCAL,
}

function isType(kind: SymbolKind): bool {
  return kind >= SymbolKind.TYPE_CLASS && kind <= SymbolKind.TYPE_NATIVE;
}

function isFunction(kind: SymbolKind): bool {
  return kind >= SymbolKind.FUNCTION_INSTANCE && kind <= SymbolKind.FUNCTION_GLOBAL;
}

function isVariable(kind: SymbolKind): bool {
  return kind >= SymbolKind.VARIABLE_ARGUMENT && kind <= SymbolKind.VARIABLE_LOCAL;
}

enum SymbolState {
  UNINITIALIZED,
  INITIALIZING,
  INITIALIZED,
}

const SYMBOL_FLAG_NATIVE_INTEGER = 1;
const SYMBOL_FLAG_IS_UNSIGNED = 2;

class Symbol {
  kind: SymbolKind;
  name: String;
  node: Node;
  range: Range;
  scope: Scope;
  resolvedType: Type;
  next: Symbol;
  state: SymbolState;
  flags: int;
  byteSize: int;
  maxAlignment: int;

  // The "offset" variable is used to store kind-specific information
  //
  //   TYPE_CLASS: N/A
  //   TYPE_ENUM: N/A
  //   TYPE_GLOBAL: N/A
  //   TYPE_NATIVE: N/A
  //
  //   FUNCTION_INSTANCE: N/A
  //   FUNCTION_GLOBAL: N/A
  //
  //   VARIABLE_ARGUMENT: Argument index
  //   VARIABLE_CONSTANT: Integer constant value
  //   VARIABLE_GLOBAL: Memory address relative to start address
  //   VARIABLE_INSTANCE: Instance offset
  //   VARIABLE_LOCAL: N/A
  //
  offset: int;

  isEnumValue(): bool {
    return this.node.parent.kind == NodeKind.ENUM;
  }

  isExtern(): bool {
    return this.node.isExtern();
  }

  resolvedTypeUnderlyingIfEnumValue(context: CheckContext): Type {
    return this.isEnumValue() ? this.resolvedType.underlyingType(context) : this.resolvedType;
  }

  determineClassLayout(context: CheckContext): void {
    assert(this.kind == SymbolKind.TYPE_CLASS);

    // Only determine class layout once
    if (this.byteSize != 0) {
      return;
    }

    var offset = 0;
    var child = this.node.firstChild;
    var maxAlignment = 1;

    while (child != null) {
      if (child.kind == NodeKind.VARIABLE) {
        var type = child.symbol.resolvedType;

        // Ignore invalid members
        if (type != context.errorType) {
          var alignmentOf = type.alignmentOf();

          // Align the member to the next available slot
          offset = alignToNextMultipleOf(offset, alignmentOf);
          if (alignmentOf > maxAlignment) maxAlignment = alignmentOf;

          // Allocate the member by extending the object
          child.symbol.offset = offset;
          offset = offset + type.sizeOf();
        }
      }

      child = child.nextSibling;
    }

    // All objects must have a non-zero size
    this.byteSize = offset > 0 ? offset : 1;
    this.maxAlignment = maxAlignment;
  }
}
