enum CompileTarget {
  NONE,
  JAVASCRIPT,
  WEBASSEMBLY,
}

class Compiler {
  log: Log;
  global: Node;
  target: CompileTarget;
  context: CheckContext;
  wasm: ByteArray;
  js: String;

  initialize(target: CompileTarget): void {
    assert(this.log == null);
    this.log = new Log();
    this.global = new Node();
    this.global.kind = NodeKind.GLOBAL;
    this.target = target;

    if (target == CompileTarget.WEBASSEMBLY) {
      this.addInput(String_new("<native>"), String_new(libraryWASM()));
    }
  }

  addInput(name: String, contents: String): void {
    var source = new Source();
    source.name = name;
    source.contents = contents;

    var firstToken = tokenize(source, this.log);
    if (firstToken != null) {
      var file = parse(firstToken, this.log);

      if (file != null) {
        while (file.firstChild != null) {
          var child = file.firstChild;
          child.remove();
          this.global.appendChild(child);
        }
      }
    }
  }

  finish(): bool {
    assert(this.context == null);
    this.context = check(this.global, this.log);

    if (this.log.first != null) {
      return false;
    }

    if (this.target == CompileTarget.JAVASCRIPT) {
      this.js = jsEmit(this.global, this.context);
    }

    else if (this.target == CompileTarget.WEBASSEMBLY) {
      this.wasm = new ByteArray();
      wasmEmit(this.global, this.context, this.wasm);
    }

    return true;
  }
}

extern function Compiler_new(target: CompileTarget): Compiler {
  var compiler = new Compiler();
  compiler.initialize(target);
  return compiler;
}

extern function Compiler_addInput(compiler: Compiler, name: String, contents: String): void {
  compiler.addInput(name, contents);
}

extern function Compiler_finish(compiler: Compiler): void {
  compiler.finish();
}

extern function Compiler_wasm(compiler: Compiler): int {
  return compiler.wasm == null ? 0 : compiler.wasm.handle();
}

extern function Compiler_js(compiler: Compiler): String {
  return compiler.js;
}

extern function Compiler_log(compiler: Compiler): String {
  return compiler.log.toString();
}
