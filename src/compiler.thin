extern enum CompileTarget {
  NONE,
  C,
  JAVASCRIPT,
  WEBASSEMBLY,
}

class Compiler {
  log: Log;
  global: Node;
  firstSource: Source;
  lastSource: Source;
  preprocessor: Preprocessor;
  target: CompileTarget;
  context: CheckContext;
  librarySource: Source;
  wasm: ByteArray;
  js: string;
  c: string;

  initialize(target: CompileTarget): void {
    assert(this.log == null);
    this.log = new Log();
    this.preprocessor = new Preprocessor();
    this.target = target;
    this.librarySource = this.addInput("<native>", library());
    this.createGlobals();

    if (target == CompileTarget.C) {
      this.preprocessor.define("C", true);
    }

    else if (target == CompileTarget.JAVASCRIPT) {
      this.preprocessor.define("JS", true);
    }

    else if (target == CompileTarget.WEBASSEMBLY) {
      this.preprocessor.define("WASM", true);
    }
  }

  createGlobals(): void {
    var context = new CheckContext();
    context.log = this.log;

    var global = new Node();
    global.kind = NodeKind.GLOBAL;

    var scope = new Scope();
    global.scope = scope;

    // Hard-coded types
    context.errorType = scope.defineNativeType(context.log, "<error>");
    context.nullType = scope.defineNativeType(context.log, "null");
    context.voidType = scope.defineNativeType(context.log, "void");

    this.context = context;
    this.global = global;
  }

  addInput(name: string, contents: string): Source {
    var source = new Source();
    source.name = name;
    source.contents = contents;

    if (this.firstSource == null) this.firstSource = source;
    else this.lastSource.next = source;
    this.lastSource = source;

    return source;
  }

  finish(): bool {
    Profiler_begin();

    var source = this.firstSource;
    while (source != null) {
      source.firstToken = tokenize(source, this.log);
      source = source.next;
    }

    Profiler_end("lexing");
    Profiler_begin();

    source = this.firstSource;
    while (source != null) {
      this.preprocessor.run(source, this.log);
      source = source.next;
    }

    Profiler_end("preprocessing");
    Profiler_begin();

    source = this.firstSource;
    while (source != null) {
      if (source.firstToken != null) {
        source.file = parse(source.firstToken, this.log);
      }
      source = source.next;
    }

    Profiler_end("parsing");
    Profiler_begin();

    var global = this.global;
    var context = this.context;

    source = this.firstSource;
    while (source != null) {
      var file = source.file;

      if (file != null) {
        if (source == this.librarySource) {
          initialize(context, file, global.scope, CheckMode.INITIALIZE);
          resolve(context, file, global.scope);
        } else {
          initialize(context, file, global.scope, CheckMode.NORMAL);
        }

        while (file.firstChild != null) {
          var child = file.firstChild;
          child.remove();
          global.appendChild(child);
        }
      }

      source = source.next;
    }

    resolve(context, global, global.scope);

    Profiler_end("checking");

    if (this.log.hasErrors()) {
      return false;
    }

    Profiler_begin();

    if (this.target == CompileTarget.C) {
      this.c = cEmit(global, context);
    }

    else if (this.target == CompileTarget.JAVASCRIPT) {
      this.js = jsEmit(global, context);
    }

    else if (this.target == CompileTarget.WEBASSEMBLY) {
      this.wasm = new ByteArray();
      wasmEmit(global, context, this.wasm);
    }

    Profiler_end("emitting");

    return true;
  }
}

extern function Compiler_new(target: CompileTarget): Compiler {
  var compiler = new Compiler();
  compiler.initialize(target);
  return compiler;
}

extern function Compiler_callAddInput(compiler: Compiler, name: string, contents: string): void {
  compiler.addInput(name, contents);
}

extern function Compiler_define(compiler: Compiler, text: string): void {
  compiler.preprocessor.define(text, true);
}

extern function Compiler_callFinish(compiler: Compiler): bool {
  compiler.finish();
  return !compiler.log.hasErrors();
}

extern function Compiler_wasm(compiler: Compiler): ByteArray {
  return compiler.wasm;
}

extern function Compiler_js(compiler: Compiler): string {
  return compiler.js;
}

extern function Compiler_c(compiler: Compiler): string {
  return compiler.c;
}

extern function Compiler_log(compiler: Compiler): string {
  return compiler.log.toString();
}

#if WASM
  unsafe function memcpy(target: uint, source: uint, length: uint): void {
    // No-op if either of the inputs are null
    if (source == 0 || target == 0) {
      return;
    }

    // Optimized aligned copy
    if (length >= 16 && source % 4 == target % 4) {
      // Pick off the beginning
      while (target % 4 != 0) {
        (target as BytePtr).value = (source as BytePtr).value;
        target = target + 1;
        source = source + 1;
        length = length - 1;
      }

      // Pick off the end
      while (length % 4 != 0) {
        length = length - 1;
        ((target + length) as BytePtr).value = ((source + length) as BytePtr).value;
      }

      // Zip over the middle
      var end = target + length;
      while (target < end) {
        (target as UIntPtr).value = (source as UIntPtr).value;
        target = target + 4;
        source = source + 4;
      }
    }

    // Slow unaligned copy
    else {
      var end = target + length;
      while (target < end) {
        (target as BytePtr).value = (source as BytePtr).value;
        target = target + 1;
        source = source + 1;
      }
    }
  }

  extern unsafe function Compiler_resetHeapPointer(): void {
    currentHeapPointer = originalHeapPointer; // Reset the heap
    stringBuilderPool = null;
  }
#endif
