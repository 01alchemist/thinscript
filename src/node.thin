enum NodeKind {
  // Other
  GLOBAL,
  VARIABLE,

  // Statements
  BLOCK,
  BREAK,
  CLASS,
  CONSTANTS,
  CONTINUE,
  EMPTY,
  ENUM,
  EXPRESSION,
  FUNCTION,
  IF,
  RETURN,
  UNSAFE,
  VARIABLES,
  WHILE,

  // Expressions
  ALIGN_OF,
  BOOL,
  CALL,
  CAST,
  DOT,
  HOOK,
  INDEX,
  INT,
  NAME,
  NEW,
  NULL,
  PARSE_ERROR,
  SIZE_OF,
  STRING,
  THIS,
  TYPE,

  // Unary expressions
  COMPLEMENT,
  NEGATIVE,
  NOT,
  POSITIVE,
  POSTFIX_DECREMENT,
  POSTFIX_INCREMENT,
  PREFIX_DECREMENT,
  PREFIX_INCREMENT,

  // Binary expressions
  ADD,
  ASSIGN,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  DIVIDE,
  EQUAL,
  GREATER_THAN,
  GREATER_THAN_EQUAL,
  LESS_THAN,
  LESS_THAN_EQUAL,
  LOGICAL_AND,
  LOGICAL_OR,
  MULTIPLY,
  NOT_EQUAL,
  REMAINDER,
  SHIFT_LEFT,
  SHIFT_RIGHT,
  SUBTRACT,
}

function isUnary(kind: NodeKind): bool {
  return kind >= NodeKind.COMPLEMENT && kind <= NodeKind.PREFIX_INCREMENT;
}

function isUnaryPostfix(kind: NodeKind): bool {
  return kind >= NodeKind.POSTFIX_DECREMENT && kind <= NodeKind.POSTFIX_INCREMENT;
}

function isBinary(kind: NodeKind): bool {
  return kind >= NodeKind.ADD && kind <= NodeKind.SUBTRACT;
}

function isExpression(node: Node): bool {
  return node.kind >= NodeKind.ALIGN_OF && node.kind <= NodeKind.SUBTRACT;
}

const NODE_FLAG_DECLARE = 1 << 0;
const NODE_FLAG_EXPORT = 1 << 1;
const NODE_FLAG_EXTERN = 1 << 2;
const NODE_FLAG_GET = 1 << 3;
const NODE_FLAG_PRIVATE = 1 << 4;
const NODE_FLAG_PROTECTED = 1 << 5;
const NODE_FLAG_PUBLIC = 1 << 6;
const NODE_FLAG_SET = 1 << 7;
const NODE_FLAG_STATIC = 1 << 8;
const NODE_FLAG_UNSAFE = 1 << 9;
const NODE_FLAG_UNSIGNED_OPERATOR = 1 << 10;

class NodeFlag {
  flag: int;
  range: Range;
  next: NodeFlag;
}

function appendFlag(first: NodeFlag, flag: int, range: Range): NodeFlag {
  var link = new NodeFlag();
  link.flag = flag;
  link.range = range;

  // Is the list empty?
  if (first == null) {
    return link;
  }

  // Append the flag to the end of the list
  var secondToLast = first;
  while (secondToLast.next != null) {
    secondToLast = secondToLast.next;
  }
  secondToLast.next = link;
  return first;
}

function allFlags(link: NodeFlag): int {
  var all = 0;
  while (link != null) {
    all = all | link.flag;
    link = link.next;
  }
  return all;
}

function rangeForFlag(link: NodeFlag, flag: int): Range {
  while (link != null) {
    if (link.flag == flag) {
      return link.range;
    }
    link = link.next;
  }
  return null;
}

class Node {
  kind: NodeKind;
  flags: int;
  firstFlag: NodeFlag;
  range: Range;
  internalRange: Range;
  parent: Node;
  firstChild: Node;
  lastChild: Node;
  previousSibling: Node;
  nextSibling: Node;
  intValue: int;
  stringValue: string;
  resolvedType: Type;
  symbol: Symbol;
  scope: Scope;

  isNegativeInteger(): bool {
    return this.kind == NodeKind.INT && this.intValue < 0;
  }

  isNonNegativeInteger(): bool {
    return this.kind == NodeKind.INT && this.intValue >= 0;
  }

  isDeclare(): bool {
    return (this.flags & NODE_FLAG_DECLARE) != 0;
  }

  isExtern(): bool {
    return (this.flags & NODE_FLAG_EXTERN) != 0;
  }

  isUnsafe(): bool {
    return (this.flags & NODE_FLAG_UNSAFE) != 0;
  }

  isUnsignedOperator(): bool {
    return (this.flags & NODE_FLAG_UNSIGNED_OPERATOR) != 0;
  }

  childCount(): int {
    var count = 0;
    var child = this.firstChild;
    while (child != null) {
      count = count + 1;
      child = child.nextSibling;
    }
    return count;
  }

  appendChild(child: Node): void {
    child.parent = this;

    if (this.firstChild == null) {
      this.firstChild = child;
    }

    else {
      child.previousSibling = this.lastChild;
      this.lastChild.nextSibling = child;
    }

    this.lastChild = child;
  }

  prependChild(child: Node): void {
    this.insertChildBefore(this.firstChild, child);
  }

  insertChildBefore(after: Node, before: Node): void {
    if (before == null) {
      return;
    }

    assert(before != after);
    assert(before.parent == null);
    assert(before.previousSibling == null);
    assert(before.nextSibling == null);
    assert(after == null || after.parent == this);

    if (after == null) {
      this.appendChild(before);
      return;
    }

    before.parent = this;
    before.previousSibling = after.previousSibling;
    before.nextSibling = after;

    if (after.previousSibling != null) {
      assert(after == after.previousSibling.nextSibling);
      after.previousSibling.nextSibling = before;
    } else {
      assert(after == this.firstChild);
      this.firstChild = before;
    }

    after.previousSibling = before;
  }

  remove(): void {
    assert(this.parent != null);

    if (this.previousSibling != null) {
      assert(this.previousSibling.nextSibling == this);
      this.previousSibling.nextSibling = this.nextSibling;
    } else {
      assert(this.parent.firstChild == this);
      this.parent.firstChild = this.nextSibling;
    }

    if (this.nextSibling != null) {
      assert(this.nextSibling.previousSibling == this);
      this.nextSibling.previousSibling = this.previousSibling;
    } else {
      assert(this.parent.lastChild == this);
      this.parent.lastChild = this.previousSibling;
    }

    this.parent = null;
    this.previousSibling = null;
    this.nextSibling = null;
  }

  removeChildren(): void {
    while (this.lastChild != null) {
      this.lastChild.remove();
    }
  }

  replaceWith(node: Node): void {
    assert(node != this);
    assert(this.parent != null);
    assert(node.parent == null);
    assert(node.previousSibling == null);
    assert(node.nextSibling == null);

    node.parent = this.parent;
    node.previousSibling = this.previousSibling;
    node.nextSibling = this.nextSibling;

    if (this.previousSibling != null) {
      assert(this.previousSibling.nextSibling == this);
      this.previousSibling.nextSibling = node;
    } else {
      assert(this.parent.firstChild == this);
      this.parent.firstChild = node;
    }

    if (this.nextSibling != null) {
      assert(this.nextSibling.previousSibling == this);
      this.nextSibling.previousSibling = node;
    } else {
      assert(this.parent.lastChild == this);
      this.parent.lastChild = node;
    }

    this.parent = null;
    this.previousSibling = null;
    this.nextSibling = null;
  }

  becomeSymbolReference(symbol: Symbol): void {
    this.kind = NodeKind.NAME;
    this.symbol = symbol;
    this.stringValue = symbol.name;
    this.resolvedType = symbol.resolvedType;
    this.removeChildren();
  }

  becomeIntegerConstant(value: int): void {
    this.kind = NodeKind.INT;
    this.symbol = null;
    this.intValue = value;
    this.removeChildren();
  }

  becomeBooleanConstant(value: bool): void {
    this.kind = NodeKind.BOOL;
    this.symbol = null;
    this.intValue = value ? 1 : 0;
    this.removeChildren();
  }

  isType(): bool {
    return this.kind == NodeKind.TYPE || this.symbol != null && isType(this.symbol.kind);
  }

  withRange(range: Range): Node {
    this.range = range;
    return this;
  }

  withInternalRange(range: Range): Node {
    this.internalRange = range;
    return this;
  }

  functionFirstArgumentIgnoringThis(): Node {
    assert(this.kind == NodeKind.FUNCTION);
    assert(this.childCount() >= 2);
    assert(this.symbol != null);
    return this.symbol.kind == SymbolKind.FUNCTION_INSTANCE ? this.firstChild.nextSibling : this.firstChild;
  }

  functionReturnType(): Node {
    assert(this.kind == NodeKind.FUNCTION);
    assert(this.childCount() >= 2);
    assert(isExpression(this.lastChild.previousSibling));
    return this.lastChild.previousSibling;
  }

  functionBody(): Node {
    assert(this.kind == NodeKind.FUNCTION);
    assert(this.childCount() >= 2);
    assert(this.lastChild.kind == NodeKind.BLOCK || this.lastChild.kind == NodeKind.EMPTY);
    var body = this.lastChild;
    return body.kind == NodeKind.BLOCK ? body : null;
  }

  newType(): Node {
    assert(this.kind == NodeKind.NEW);
    assert(this.childCount() >= 1);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  callValue(): Node {
    assert(this.kind == NodeKind.CALL);
    assert(this.childCount() >= 1);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  castValue(): Node {
    assert(this.kind == NodeKind.CAST);
    assert(this.childCount() == 2);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  castType(): Node {
    assert(this.kind == NodeKind.CAST);
    assert(this.childCount() == 2);
    assert(isExpression(this.lastChild));
    return this.lastChild;
  }

  alignOfType(): Node {
    assert(this.kind == NodeKind.ALIGN_OF);
    assert(this.childCount() == 1);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  sizeOfType(): Node {
    assert(this.kind == NodeKind.SIZE_OF);
    assert(this.childCount() == 1);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  dotTarget(): Node {
    assert(this.kind == NodeKind.DOT);
    assert(this.childCount() == 1);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  returnValue(): Node {
    assert(this.kind == NodeKind.RETURN);
    assert(this.childCount() <= 1);
    assert(this.firstChild == null || isExpression(this.firstChild));
    return this.firstChild;
  }

  variableType(): Node {
    assert(this.kind == NodeKind.VARIABLE);
    assert(this.childCount() <= 2);
    assert(isExpression(this.firstChild) || this.firstChild.kind == NodeKind.EMPTY);
    var type = this.firstChild;
    return type.kind != NodeKind.EMPTY ? type : null;
  }

  variableValue(): Node {
    assert(this.kind == NodeKind.VARIABLE);
    assert(this.childCount() <= 2);
    assert(this.firstChild.nextSibling == null || isExpression(this.firstChild.nextSibling));
    return this.firstChild.nextSibling;
  }

  expressionValue(): Node {
    assert(this.kind == NodeKind.EXPRESSION);
    assert(this.childCount() == 1);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  binaryLeft(): Node {
    assert(isBinary(this.kind));
    assert(this.childCount() == 2);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  binaryRight(): Node {
    assert(isBinary(this.kind));
    assert(this.childCount() == 2);
    assert(isExpression(this.lastChild));
    return this.lastChild;
  }

  unaryValue(): Node {
    assert(isUnary(this.kind));
    assert(this.childCount() == 1);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  whileValue(): Node {
    assert(this.kind == NodeKind.WHILE);
    assert(this.childCount() == 2);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  whileBody(): Node {
    assert(this.kind == NodeKind.WHILE);
    assert(this.childCount() == 2);
    assert(this.lastChild.kind == NodeKind.BLOCK);
    return this.lastChild;
  }

  hookValue(): Node {
    assert(this.kind == NodeKind.HOOK);
    assert(this.childCount() == 3);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  hookTrue(): Node {
    assert(this.kind == NodeKind.HOOK);
    assert(this.childCount() == 3);
    assert(isExpression(this.firstChild.nextSibling));
    return this.firstChild.nextSibling;
  }

  hookFalse(): Node {
    assert(this.kind == NodeKind.HOOK);
    assert(this.childCount() == 3);
    assert(isExpression(this.lastChild));
    return this.lastChild;
  }

  indexTarget(): Node {
    assert(this.kind == NodeKind.INDEX);
    assert(this.childCount() >= 1);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  ifValue(): Node {
    assert(this.kind == NodeKind.IF);
    assert(this.childCount() == 2 || this.childCount() == 3);
    assert(isExpression(this.firstChild));
    return this.firstChild;
  }

  ifTrue(): Node {
    assert(this.kind == NodeKind.IF);
    assert(this.childCount() == 2 || this.childCount() == 3);
    assert(this.firstChild.nextSibling.kind == NodeKind.BLOCK);
    return this.firstChild.nextSibling;
  }

  ifFalse(): Node {
    assert(this.kind == NodeKind.IF);
    assert(this.childCount() == 2 || this.childCount() == 3);
    assert(this.firstChild.nextSibling.nextSibling == null || this.firstChild.nextSibling.nextSibling.kind == NodeKind.BLOCK);
    return this.firstChild.nextSibling.nextSibling;
  }
}

function createNew(type: Node): Node {
  assert(isExpression(type));
  var node = new Node();
  node.kind = NodeKind.NEW;
  node.appendChild(type);
  return node;
}

function createHook(test: Node, primary: Node, secondary: Node): Node {
  assert(isExpression(test));
  assert(isExpression(primary));
  assert(isExpression(secondary));
  var node = new Node();
  node.kind = NodeKind.HOOK;
  node.appendChild(test);
  node.appendChild(primary);
  node.appendChild(secondary);
  return node;
}

function createIndex(target: Node): Node {
  assert(isExpression(target));
  var node = new Node();
  node.kind = NodeKind.INDEX;
  node.appendChild(target);
  return node;
}

function createNull(): Node {
  var node = new Node();
  node.kind = NodeKind.NULL;
  return node;
}

function createThis(): Node {
  var node = new Node();
  node.kind = NodeKind.THIS;
  return node;
}

function createAlignOf(type: Node): Node {
  assert(isExpression(type));
  var node = new Node();
  node.kind = NodeKind.ALIGN_OF;
  node.appendChild(type);
  return node;
}

function createSizeOf(type: Node): Node {
  assert(isExpression(type));
  var node = new Node();
  node.kind = NodeKind.SIZE_OF;
  node.appendChild(type);
  return node;
}

function createBool(value: bool): Node {
  var node = new Node();
  node.kind = NodeKind.BOOL;
  node.intValue = value ? 1 : 0;
  return node;
}

function createInt(value: int): Node {
  var node = new Node();
  node.kind = NodeKind.INT;
  node.intValue = value;
  return node;
}

function createString(value: string): Node {
  var node = new Node();
  node.kind = NodeKind.STRING;
  node.stringValue = value;
  return node;
}

function createName(value: string): Node {
  var node = new Node();
  node.kind = NodeKind.NAME;
  node.stringValue = value;
  return node;
}

function createType(type: Type): Node {
  assert(type != null);
  var node = new Node();
  node.kind = NodeKind.TYPE;
  node.resolvedType = type;
  return node;
}

function createEmpty(): Node {
  var node = new Node();
  node.kind = NodeKind.EMPTY;
  return node;
}

function createExpression(value: Node): Node {
  assert(isExpression(value));
  var node = new Node();
  node.kind = NodeKind.EXPRESSION;
  node.appendChild(value);
  return node;
}

function createBlock(): Node {
  var node = new Node();
  node.kind = NodeKind.BLOCK;
  return node;
}

function createClass(name: string): Node {
  var node = new Node();
  node.kind = NodeKind.CLASS;
  node.stringValue = name;
  return node;
}

function createEnum(name: string): Node {
  var node = new Node();
  node.kind = NodeKind.ENUM;
  node.stringValue = name;
  return node;
}

function createIf(value: Node, trueBranch: Node, falseBranch: Node): Node {
  assert(isExpression(value));
  assert(trueBranch.kind == NodeKind.BLOCK);
  assert(falseBranch == null || falseBranch.kind == NodeKind.BLOCK);
  var node = new Node();
  node.kind = NodeKind.IF;
  node.appendChild(value);
  node.appendChild(trueBranch);
  if (falseBranch != null) {
    node.appendChild(falseBranch);
  }
  return node;
}

function createWhile(value: Node, body: Node): Node {
  assert(isExpression(value));
  assert(body.kind == NodeKind.BLOCK);
  var node = new Node();
  node.kind = NodeKind.WHILE;
  node.appendChild(value);
  node.appendChild(body);
  return node;
}

function createReturn(value: Node): Node {
  assert(value == null || isExpression(value));
  var node = new Node();
  node.kind = NodeKind.RETURN;
  if (value != null) {
    node.appendChild(value);
  }
  return node;
}

function createVariables(): Node {
  var node = new Node();
  node.kind = NodeKind.VARIABLES;
  return node;
}

function createConstants(): Node {
  var node = new Node();
  node.kind = NodeKind.CONSTANTS;
  return node;
}

function createVariable(name: string, type: Node, value: Node): Node {
  assert(type == null || isExpression(type));
  assert(value == null || isExpression(value));

  var node = new Node();
  node.kind = NodeKind.VARIABLE;
  node.stringValue = name;

  node.appendChild(type != null ? type : createEmpty());
  if (value != null) {
    node.appendChild(value);
  }

  return node;
}

function createFunction(name: string): Node {
  var node = new Node();
  node.kind = NodeKind.FUNCTION;
  node.stringValue = name;
  return node;
}

function createUnary(kind: NodeKind, value: Node): Node {
  assert(isUnary(kind));
  assert(isExpression(value));
  var node = new Node();
  node.kind = kind;
  node.appendChild(value);
  return node;
}

function createBinary(kind: NodeKind, left: Node, right: Node): Node {
  assert(isBinary(kind));
  assert(isExpression(left));
  assert(isExpression(right));
  var node = new Node();
  node.kind = kind;
  node.appendChild(left);
  node.appendChild(right);
  return node;
}

function createCall(value: Node): Node {
  assert(isExpression(value));
  var node = new Node();
  node.kind = NodeKind.CALL;
  node.appendChild(value);
  return node;
}

function createCast(value: Node, type: Node): Node {
  assert(isExpression(value));
  assert(isExpression(type));
  var node = new Node();
  node.kind = NodeKind.CAST;
  node.appendChild(value);
  node.appendChild(type);
  return node;
}

function createDot(value: Node, name: string): Node {
  assert(isExpression(value));
  var node = new Node();
  node.kind = NodeKind.DOT;
  node.stringValue = name;
  node.appendChild(value);
  return node;
}

function createMemberReference(value: Node, symbol: Symbol): Node {
  assert(isExpression(value));
  var node = new Node();
  node.kind = NodeKind.DOT;
  node.stringValue = symbol.name;
  node.symbol = symbol;
  node.resolvedType = symbol.resolvedType;
  node.appendChild(value);
  return node;
}

function createParseError(): Node {
  var node = new Node();
  node.kind = NodeKind.PARSE_ERROR;
  return node;
}
