enum EmitBinary {
  NORMAL,
  CAST_TO_INT,
}

class JsResult {
  context: CheckContext;
  code: String;
  indent: int;
  foundMultiply: bool;
  previousNode: Node;

  emitIndent(): void {
    var i = this.indent;
    while (i > 0) {
      this.code = String_appendNew(this.code, "  ");
      i = i - 1;
    }
  }

  emitText(text: string): void {
    this.code = String_appendNew(this.code, text);
  }

  emitString(text: String): void {
    this.code = String_append(this.code, text);
  }

  emitNewlineBefore(node: Node): void {
    if (this.previousNode != null && (!jsIsCompactNodeKind(this.previousNode.kind) || !jsIsCompactNodeKind(node.kind))) {
      this.emitText("\n");
    }
    this.previousNode = null;
  }

  emitNewlineAfter(node: Node): void {
    this.previousNode = node;
  }

  emitStatements(node: Node): void {
    while (node != null) {
      this.emitStatement(node);
      node = node.nextSibling;
    }
  }

  emitBlock(node: Node): void {
    this.previousNode = null;
    this.emitText("{\n");
    this.indent = this.indent + 1;
    this.emitStatements(node.firstChild);
    this.indent = this.indent - 1;
    this.emitIndent();
    this.emitText("}");
    this.previousNode = null;
  }

  emitUnary(node: Node, parentPrecedence: Precedence, operator: string): void {
    var isPostfix = isUnaryPostfix(node.kind);
    var operatorPrecedence = isPostfix ? Precedence.UNARY_POSTFIX : Precedence.UNARY_PREFIX;

    if (parentPrecedence > operatorPrecedence) {
      this.emitText("(");
    }

    if (!isPostfix) {
      this.emitText(operator);
    }

    this.emitExpression(node.unaryValue(), operatorPrecedence);

    if (isPostfix) {
      this.emitText(operator);
    }

    if (parentPrecedence > operatorPrecedence) {
      this.emitText(")");
    }
  }

  emitBinary(node: Node, parentPrecedence: Precedence, operator: string, operatorPrecedence: Precedence, mode: EmitBinary): void {
    var isRightAssociative = node.kind == NodeKind.ASSIGN;
    var parentKind = node.parent.kind;
    var isUnsigned = node.isUnsignedOperator();

    // Avoid casting when the parent operator already does a cast
    var shouldCastToInt = mode == EmitBinary.CAST_TO_INT && (isUnsigned ||
      parentKind != NodeKind.SHIFT_LEFT && parentKind != NodeKind.SHIFT_RIGHT &&
      parentKind != NodeKind.BITWISE_OR && parentKind != NodeKind.BITWISE_AND && parentKind != NodeKind.BITWISE_XOR);
    var selfPrecedence = shouldCastToInt ? isUnsigned ? Precedence.SHIFT : Precedence.BITWISE_OR : parentPrecedence;

    if (parentPrecedence > selfPrecedence) {
      this.emitText("(");
    }

    if (selfPrecedence > operatorPrecedence) {
      this.emitText("(");
    }

    this.emitExpression(node.binaryLeft(), isRightAssociative ? (operatorPrecedence as int + 1) as Precedence : operatorPrecedence);
    this.emitText(operator);
    this.emitExpression(node.binaryRight(), isRightAssociative ? operatorPrecedence : (operatorPrecedence as int + 1) as Precedence);

    if (selfPrecedence > operatorPrecedence) {
      this.emitText(")");
    }

    if (shouldCastToInt) {
      this.emitText(isUnsigned ? " >>> 0" : " | 0");
    }

    if (parentPrecedence > selfPrecedence) {
      this.emitText(")");
    }
  }

  emitCommaSeparatedExpressions(start: Node, stop: Node): void {
    while (start != stop) {
      this.emitExpression(start, Precedence.LOWEST);
      start = start.nextSibling;

      if (start != stop) {
        this.emitText(", ");
      }
    }
  }

  emitExpression(node: Node, parentPrecedence: Precedence): void {
    assert(node.resolvedType != null);

    if (node.kind == NodeKind.NAME) {
      var symbol = node.symbol;
      if (symbol.kind == SymbolKind.FUNCTION_GLOBAL && symbol.node.isDeclare()) {
        this.emitText("globals.");
      }
      this.emitText(symbol.name);
    }

    else if (node.kind == NodeKind.NULL) {
      this.emitText("null");
    }

    else if (node.kind == NodeKind.BOOL) {
      this.emitText(node.intValue != 0 ? "true" : "false");
    }

    else if (node.kind == NodeKind.INT) {
      this.emitString(node.resolvedType.isUnsigned()
        ? String_toStringUnsigned(node.intValue as uint)
        : String_toStringSigned(node.intValue));
    }

    else if (node.kind == NodeKind.STRING) {
      this.emitString(String_quote(String_new(node.stringValue)));
    }

    else if (node.kind == NodeKind.CAST) {
      var context = this.context;
      var value = node.castValue();
      var from = value.resolvedType.underlyingType(context);
      var type = node.resolvedType.underlyingType(context);

      // The cast isn't needed if it's to a wider integer type
      if (from == type || from.symbol.byteSize < type.symbol.byteSize) {
        this.emitExpression(value, parentPrecedence);
      }

      else {
        // Sign-extend
        if (type == context.byteType || type == context.shortType) {
          if (parentPrecedence > Precedence.SHIFT) {
            this.emitText("(");
          }

          var shift = String_toStringSigned(32 - type.symbol.byteSize * 8);
          this.emitExpression(value, Precedence.SHIFT);
          this.emitText(" << ");
          this.emitString(shift);
          this.emitText(" >> ");
          this.emitString(shift);

          if (parentPrecedence > Precedence.SHIFT) {
            this.emitText(")");
          }
        }

        // Mask
        else if (type == context.ubyteType || type == context.ushortType) {
          if (parentPrecedence > Precedence.BITWISE_AND) {
            this.emitText("(");
          }

          this.emitExpression(value, Precedence.BITWISE_AND);
          this.emitText(" & ");
          this.emitString(String_toStringUnsigned(type.integerBitMask()));

          if (parentPrecedence > Precedence.BITWISE_AND) {
            this.emitText(")");
          }
        }

        // Truncate signed
        else if (type == context.intType) {
          if (parentPrecedence > Precedence.BITWISE_OR) {
            this.emitText("(");
          }

          this.emitExpression(value, Precedence.BITWISE_OR);
          this.emitText(" | 0");

          if (parentPrecedence > Precedence.BITWISE_OR) {
            this.emitText(")");
          }
        }

        // Truncate unsigned
        else if (type == context.uintType) {
          if (parentPrecedence > Precedence.SHIFT) {
            this.emitText("(");
          }

          this.emitExpression(value, Precedence.SHIFT);
          this.emitText(" >>> 0");

          if (parentPrecedence > Precedence.SHIFT) {
            this.emitText(")");
          }
        }

        // No cast needed
        else {
          this.emitExpression(value, parentPrecedence);
        }
      }
    }

    else if (node.kind == NodeKind.DOT) {
      this.emitExpression(node.dotTarget(), Precedence.MEMBER);
      this.emitSymbolAccess(node.symbol);
    }

    else if (node.kind == NodeKind.HOOK) {
      if (parentPrecedence > Precedence.ASSIGN) {
        this.emitText("(");
      }

      this.emitExpression(node.hookValue(), Precedence.LOGICAL_OR);
      this.emitText(" ? ");
      this.emitExpression(node.hookTrue(), Precedence.ASSIGN);
      this.emitText(" : ");
      this.emitExpression(node.hookFalse(), Precedence.ASSIGN);

      if (parentPrecedence > Precedence.ASSIGN) {
        this.emitText(")");
      }
    }

    else if (node.kind == NodeKind.CALL) {
      var value = node.callValue();
      var isDeclaredInstance = value.kind == NodeKind.DOT && value.symbol.node.isDeclare();

      if (isDeclaredInstance && string_equals(value.symbol.name, "[]")) {
        this.emitExpression(value.dotTarget(), Precedence.UNARY_POSTFIX);
        this.emitText("[");
        this.emitCommaSeparatedExpressions(value.nextSibling, null);
        this.emitText("]");
      }

      else if (isDeclaredInstance && string_equals(value.symbol.name, "[]=")) {
        if (parentPrecedence > Precedence.ASSIGN) {
          this.emitText("(");
        }

        this.emitExpression(value.dotTarget(), Precedence.UNARY_POSTFIX);
        this.emitText("[");
        this.emitCommaSeparatedExpressions(value.nextSibling, node.lastChild);
        this.emitText("] = ");
        this.emitExpression(node.lastChild, Precedence.ASSIGN);

        if (parentPrecedence > Precedence.ASSIGN) {
          this.emitText(")");
        }
      }

      else {
        this.emitExpression(value, Precedence.UNARY_POSTFIX);
        this.emitText("(");
        this.emitCommaSeparatedExpressions(value.nextSibling, null);
        this.emitText(")");
      }
    }

    else if (node.kind == NodeKind.NEW) {
      this.emitText("new ");
      this.emitExpression(node.newType(), Precedence.UNARY_POSTFIX);
      this.emitText("()");
    }

    else if (node.kind == NodeKind.COMPLEMENT) this.emitUnary(node, parentPrecedence, "~");
    else if (node.kind == NodeKind.NEGATIVE) this.emitUnary(node, parentPrecedence, "-");
    else if (node.kind == NodeKind.NOT) this.emitUnary(node, parentPrecedence, "!");
    else if (node.kind == NodeKind.POSITIVE) this.emitUnary(node, parentPrecedence, "+");
    else if (node.kind == NodeKind.PREFIX_INCREMENT) this.emitUnary(node, parentPrecedence, "++");
    else if (node.kind == NodeKind.PREFIX_DECREMENT) this.emitUnary(node, parentPrecedence, "--");
    else if (node.kind == NodeKind.POSTFIX_INCREMENT) this.emitUnary(node, parentPrecedence, "++");
    else if (node.kind == NodeKind.POSTFIX_DECREMENT) this.emitUnary(node, parentPrecedence, "--");

    else if (node.kind == NodeKind.ADD) this.emitBinary(node, parentPrecedence, " + ", Precedence.ADD, EmitBinary.CAST_TO_INT);
    else if (node.kind == NodeKind.ASSIGN) this.emitBinary(node, parentPrecedence, " = ", Precedence.ASSIGN, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.BITWISE_AND) this.emitBinary(node, parentPrecedence, " & ", Precedence.BITWISE_AND, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.BITWISE_OR) this.emitBinary(node, parentPrecedence, " | ", Precedence.BITWISE_OR, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.BITWISE_XOR) this.emitBinary(node, parentPrecedence, " ^ ", Precedence.BITWISE_XOR, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.DIVIDE) this.emitBinary(node, parentPrecedence, " / ", Precedence.MULTIPLY, EmitBinary.CAST_TO_INT);
    else if (node.kind == NodeKind.EQUAL) this.emitBinary(node, parentPrecedence, " === ", Precedence.EQUAL, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.GREATER_THAN) this.emitBinary(node, parentPrecedence, " > ", Precedence.COMPARE, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.GREATER_THAN_EQUAL) this.emitBinary(node, parentPrecedence, " >= ", Precedence.COMPARE, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.LESS_THAN) this.emitBinary(node, parentPrecedence, " < ", Precedence.COMPARE, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.LESS_THAN_EQUAL) this.emitBinary(node, parentPrecedence, " <= ", Precedence.COMPARE, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.LOGICAL_AND) this.emitBinary(node, parentPrecedence, " && ", Precedence.LOGICAL_AND, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.LOGICAL_OR) this.emitBinary(node, parentPrecedence, " || ", Precedence.LOGICAL_OR, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.NOT_EQUAL) this.emitBinary(node, parentPrecedence, " !== ", Precedence.EQUAL, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.REMAINDER) this.emitBinary(node, parentPrecedence, " % ", Precedence.MULTIPLY, EmitBinary.CAST_TO_INT);
    else if (node.kind == NodeKind.SHIFT_LEFT) this.emitBinary(node, parentPrecedence, " << ", Precedence.SHIFT, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.SHIFT_RIGHT) this.emitBinary(node, parentPrecedence, node.isUnsignedOperator() ? " >>> " : " >> ", Precedence.SHIFT, EmitBinary.NORMAL);
    else if (node.kind == NodeKind.SUBTRACT) this.emitBinary(node, parentPrecedence, " - ", Precedence.ADD, EmitBinary.CAST_TO_INT);

    else if (node.kind == NodeKind.MULTIPLY) {
      var left = node.binaryLeft();
      var right = node.binaryRight();
      var isUnsigned = node.isUnsignedOperator();

      if (isUnsigned && parentPrecedence > Precedence.SHIFT) {
        this.emitText("(");
      }

      this.emitText("__imul(");
      this.emitExpression(left, Precedence.LOWEST);
      this.emitText(", ");
      this.emitExpression(right, Precedence.LOWEST);
      this.emitText(")");
      this.foundMultiply = true;

      if (isUnsigned) {
        this.emitText(" >>> 0");

        if (parentPrecedence > Precedence.SHIFT) {
          this.emitText(")");
        }
      }
    }

    else {
      assert(false);
    }
  }

  emitSymbolAccess(symbol: Symbol): void {
    var c = string_get(symbol.name, 0);

    if (isAlpha(c)) {
      this.emitText(".");
      this.emitText(symbol.name);
    }

    else {
      this.emitText("[");
      this.emitString(String_quote(String_new(symbol.name)));
      this.emitText("]");
    }
  }

  emitStatement(node: Node): void {
    if (node.kind == NodeKind.FUNCTION) {
      var body = node.functionBody();
      if (body == null) {
        return;
      }

      var symbol = node.symbol;
      var needsSemicolon = false;
      this.emitNewlineBefore(node);
      this.emitIndent();

      if (symbol.kind == SymbolKind.FUNCTION_INSTANCE) {
        this.emitText(symbol.parent().name);
        this.emitText(".prototype");
        this.emitSymbolAccess(symbol);
        this.emitText(" = function");
        needsSemicolon = true;
      }

      else if (node.isExtern()) {
        this.emitText("var ");
        this.emitText(symbol.name);
        this.emitText(" = exports.");
        this.emitText(symbol.name);
        this.emitText(" = function");
        needsSemicolon = true;
      }

      else {
        this.emitText("function ");
        this.emitText(symbol.name);
      }

      this.emitText("(");

      var returnType = node.functionReturnType();
      var child = node.functionFirstArgumentIgnoringThis();

      while (child != returnType) {
        assert(child.kind == NodeKind.VARIABLE);
        this.emitText(child.symbol.name);
        child = child.nextSibling;
        if (child != returnType) {
          this.emitText(", ");
        }
      }

      this.emitText(") ");
      this.emitBlock(node.functionBody());
      this.emitText(needsSemicolon ? ";\n" : "\n");
      this.emitNewlineAfter(node);
    }

    else if (node.kind == NodeKind.IF) {
      this.emitNewlineBefore(node);
      this.emitIndent();
      while (true) {
        this.emitText("if (");
        this.emitExpression(node.ifValue(), Precedence.LOWEST);
        this.emitText(") ");
        this.emitBlock(node.ifTrue());
        var no = node.ifFalse();
        if (no == null) {
          this.emitText("\n");
          break;
        }
        this.emitText("\n\n");
        this.emitIndent();
        this.emitText("else ");
        if (no.firstChild == null || no.firstChild != no.lastChild || no.firstChild.kind != NodeKind.IF) {
          this.emitBlock(no);
          this.emitText("\n");
          break;
        }
        node = no.firstChild;
      }
      this.emitNewlineAfter(node);
    }

    else if (node.kind == NodeKind.WHILE) {
      this.emitNewlineBefore(node);
      this.emitIndent();
      this.emitText("while (");
      this.emitExpression(node.whileValue(), Precedence.LOWEST);
      this.emitText(") ");
      this.emitBlock(node.whileBody());
      this.emitText("\n");
      this.emitNewlineAfter(node);
    }

    else if (node.kind == NodeKind.BREAK) {
      this.emitNewlineBefore(node);
      this.emitIndent();
      this.emitText("break;\n");
      this.emitNewlineAfter(node);
    }

    else if (node.kind == NodeKind.CONTINUE) {
      this.emitNewlineBefore(node);
      this.emitIndent();
      this.emitText("continue;\n");
      this.emitNewlineAfter(node);
    }

    else if (node.kind == NodeKind.EXPRESSION) {
      this.emitNewlineBefore(node);
      this.emitIndent();
      this.emitExpression(node.expressionValue(), Precedence.LOWEST);
      this.emitText(";\n");
      this.emitNewlineAfter(node);
    }

    else if (node.kind == NodeKind.EMPTY) {
    }

    else if (node.kind == NodeKind.RETURN) {
      var value = node.returnValue();
      this.emitNewlineBefore(node);
      this.emitIndent();
      if (value != null) {
        this.emitText("return ");
        this.emitExpression(value, Precedence.LOWEST);
        this.emitText(";\n");
      } else {
        this.emitText("return;\n");
      }
      this.emitNewlineAfter(node);
    }

    else if (node.kind == NodeKind.BLOCK) {
      if (node.parent.kind == NodeKind.BLOCK) {
        this.emitStatements(node.firstChild);
      } else {
        this.emitNewlineBefore(node);
        this.emitIndent();
        this.emitBlock(node);
        this.emitText("\n");
        this.emitNewlineAfter(node);
      }
    }

    else if (node.kind == NodeKind.VARIABLES) {
      this.emitNewlineBefore(node);
      this.emitIndent();
      this.emitText("var ");
      var child = node.firstChild;
      while (child != null) {
        var value = child.variableValue();
        this.emitText(child.symbol.name);
        child = child.nextSibling;
        if (child != null) {
          this.emitText(", ");
        }
        assert(value != null);
        this.emitText(" = ");
        this.emitExpression(value, Precedence.LOWEST);
      }
      this.emitText(";\n");
      this.emitNewlineAfter(node);
    }

    else if (node.kind == NodeKind.CLASS) {
      if (node.isDeclare()) {
        return;
      }

      this.emitNewlineBefore(node);
      this.emitIndent();
      this.emitText("function ");
      this.emitText(node.symbol.name);
      this.emitText("() {\n");
      this.indent = this.indent + 1;

      // Emit constructor body
      var child = node.firstChild;
      while (child != null) {
        if (child.kind == NodeKind.VARIABLE) {
          this.emitIndent();
          this.emitText("this.");
          this.emitText(child.symbol.name);
          this.emitText(" = ");
          this.emitExpression(child.variableValue(), Precedence.LOWEST);
          this.emitText(";\n");
        }
        child = child.nextSibling;
      }

      this.indent = this.indent - 1;
      this.emitIndent();
      this.emitText("}\n");
      this.emitNewlineAfter(node);

      // Emit instance functions
      child = node.firstChild;
      while (child != null) {
        if (child.kind == NodeKind.FUNCTION) {
          this.emitStatement(child);
        }
        child = child.nextSibling;
      }
    }

    else if (node.kind == NodeKind.CONSTANTS || node.kind == NodeKind.ENUM) {
    }

    else {
      assert(false);
    }
  }
}

function jsIsCompactNodeKind(kind: NodeKind): bool {
  return
    kind == NodeKind.CONSTANTS ||
    kind == NodeKind.EXPRESSION ||
    kind == NodeKind.VARIABLES;
}

function jsEmit(global: Node, context: CheckContext): String {
  var result = new JsResult();
  result.context = context;
  result.code = String_new("");
  result.emitStatements(global.firstChild);

  if (result.foundMultiply) {
    result.emitText("\nvar __imul = Math.imul || function(a, b) {\n");
    result.emitText("  return (a * (b >>> 16) << 16) + a * (b & 65535) | 0;\n");
    result.emitText("};\n");
  }

  return result.code;
}
