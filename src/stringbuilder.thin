var stringBuilderPool: StringBuilder = null;

// Remove an object from the pool or allocate a new object if the pool is empty
function StringBuilder_new(): StringBuilder {
  var sb = stringBuilderPool;
  if (sb != null) stringBuilderPool = sb.next;
  else sb = new StringBuilder();
  sb.clear();
  return sb;
}

function StringBuilder_appendQuoted(sb: StringBuilder, text: string): void {
  var end = 0;
  var limit = text.length;
  var start = end;

  sb.appendChar('"');

  while (end < limit) {
    var c = text[end];

    if (c == '"') sb.appendSlice(text, start, end).append("\\\"");
    else if (c == '\0') sb.appendSlice(text, start, end).append("\\0");
    else if (c == '\t') sb.appendSlice(text, start, end).append("\\t");
    else if (c == '\r') sb.appendSlice(text, start, end).append("\\r");
    else if (c == '\n') sb.appendSlice(text, start, end).append("\\n");
    else if (c == '\\') sb.appendSlice(text, start, end).append("\\\\");
    else {
      end = end + 1;
      continue;
    }

    end = end + 1;
    start = end;
  }

  sb.appendSlice(text, start, end).appendChar('"');
}

#if JS ////////////////////////////////////////////////////////////////////////////////

  declare function StringBuilder_appendChar(a: string, b: byte): string;
  declare function StringBuilder_append(a: string, b: string): string;

  class StringBuilder {
    next: StringBuilder;
    _text: string;

    clear(): void {
      this._text = "";
    }

    appendChar(c: byte): StringBuilder {
      this._text = StringBuilder_appendChar(this._text, c);
      return this;
    }

    appendSlice(text: string, start: int, end: int): StringBuilder {
      this._text = StringBuilder_append(this._text, text.slice(start, end));
      return this;
    }

    append(text: string): StringBuilder {
      this._text = StringBuilder_append(this._text, text);
      return this;
    }

    // This also "frees" this object (puts it back in the pool)
    finish(): string {
      this.next = stringBuilderPool;
      stringBuilderPool = this;
      return this._text;
    }
  }

#elif WASM ////////////////////////////////////////////////////////////////////////////////

  class StringBuilder {
    next: StringBuilder;
    _bytes: ByteArray;

    clear(): void {
      var bytes = this._bytes;
      if (bytes == null) {
        bytes = new ByteArray();
        this._bytes = bytes;
      } else {
        bytes.clear();
      }
    }

    appendChar(c: byte): StringBuilder {
      this._bytes.append(c);
      return this;
    }

    // TODO: Make this more efficient
    appendSlice(text: string, start: int, end: int): StringBuilder {
      return this.append(text.slice(start, end));
    }

    append(text: string): StringBuilder {
      var bytes = this._bytes;
      var index = bytes._length;
      unsafe {
        var length = (text as UIntPtr).value;
        bytes.resize((index + length) as int);
        memcpy(bytes._data + index, text as uint + 4, length);
      }
      return this;
    }

    // This also "frees" this object (puts it back in the pool)
    finish(): string {
      this.next = stringBuilderPool;
      stringBuilderPool = this;
      unsafe {
        var bytes = this._bytes;
        var length = bytes._length;
        var ptr = string_new(length);
        memcpy(ptr as uint + 4, bytes._data, length);
        return ptr;
      }
    }
  }

#else ////////////////////////////////////////////////////////////////////////////////

  declare class StringBuilder {
    next: StringBuilder;
    clear(): void;
    appendChar(c: byte): StringBuilder;
    appendSlice(text: string, start: int, end: int): StringBuilder;
    append(text: string): StringBuilder;
    finish(): string;
  }

#endif
