enum Precedence {
  LOWEST,
  ASSIGN,
  LOGICAL_OR,
  LOGICAL_AND,
  BITWISE_OR,
  BITWISE_XOR,
  BITWISE_AND,
  EQUAL,
  COMPARE,
  SHIFT,
  ADD,
  MULTIPLY,
  UNARY_PREFIX,
  UNARY_POSTFIX,
  MEMBER,
}

enum ParseKind {
  EXPRESSION,
  TYPE,
}

function parseInt(range: Range): int {
  var i = range.start;
  var value = 0;

  while (i < range.end) {
    value = value * 10 + String_get(range.source.contents, i) - '0';
    i = i + 1;
  }

  return value;
}

class ParserContext {
  previous: Token;
  current: Token;
  log: Log;

  peek(kind: TokenKind): bool {
    return this.current.kind == kind;
  }

  eat(kind: TokenKind): bool {
    if (this.peek(kind)) {
      this.advance();
      return true;
    }

    return false;
  }

  advance(): void {
    if (!this.peek(TokenKind.END_OF_FILE)) {
      this.previous = this.current;
      this.current = this.current.next;
    }
  }

  unexpectedToken(): void {
    this.log.error(this.current.range, String_appendNew(
      String_new("Unexpected "),
      tokenToString(this.current.kind)));
  }

  expect(kind: TokenKind): bool {
    if (!this.peek(kind)) {
      var previousLine = this.previous.range.enclosingLine();
      var currentLine = this.current.range.enclosingLine();

      // Show missing terminator errors on the previous line for clarity
      if ((kind == TokenKind.SEMICOLON || kind == TokenKind.COMMA) && !previousLine.equals(currentLine)) {
        this.log.error(createRange(previousLine.source, previousLine.end, previousLine.end), String_appendNew(
          String_new("Expected "),
          tokenToString(kind)));
      }

      else {
        this.log.error(this.current.range, String_appendNew(String_appendNew(String_appendNew(
          String_new("Expected "),
          tokenToString(kind)),
          " but found "),
          tokenToString(this.current.kind)));
      }

      return false;
    }

    this.advance();
    return true;
  }

  parseUnaryPrefix(kind: NodeKind): Node {
    assert(isUnary(kind));

    var token = this.current;
    this.advance();

    var value = this.parseExpression(Precedence.UNARY_PREFIX, ParseKind.EXPRESSION);
    if (value == null) {
      return null;
    }

    return createUnary(kind, value).withRange(spanRanges(token.range, value.range));
  }

  parseBinary(kind: NodeKind, left: Node, localPrecedence: Precedence, operatorPrecedence: Precedence): Node {
    if (localPrecedence >= operatorPrecedence) {
      return left;
    }

    this.advance();

    // Reduce the precedence since the assign operator is right-associative
    var precedence = operatorPrecedence == Precedence.ASSIGN ? Precedence.LOWEST : operatorPrecedence;
    var right = this.parseExpression(precedence, ParseKind.EXPRESSION);

    if (right == null) {
      return null;
    }

    return createBinary(kind, left, right).withRange(spanRanges(left.range, right.range));
  }

  parseUnaryPostfix(kind: NodeKind, value: Node, localPrecedence: Precedence): Node {
    if (localPrecedence >= Precedence.UNARY_POSTFIX) {
      return value;
    }

    var token = this.current;
    this.advance();
    return createUnary(kind, value).withRange(spanRanges(value.range, token.range));
  }

  parseQuotedString(range: Range): String {
    assert(range.end - range.start >= 2);
    var text = range.toString();
    var end = 1;
    var limit = String_length(text) - 1;
    var start = end;
    var result = String_new("");

    while (end < limit) {
      var c = String_get(text, end);

      if (c == '\\') {
        result = String_append(result, String_slice(text, start, end));
        end = end + 1;
        start = end + 1;
        c = String_get(text, end);

        if (c == '0') result = String_appendNew(result, "\0");
        else if (c == 't') result = String_appendNew(result, "\t");
        else if (c == 'n') result = String_appendNew(result, "\n");
        else if (c == 'r') result = String_appendNew(result, "\r");
        else if (c == '"' || c == '\'' || c == '`' || c == '\n' || c == '\\') start = end;
        else {
          var escape = createRange(range.source, range.start + end - 1, range.start + end + 1);
          this.log.error(escape, String_append(String_append(
            String_new("Invalid escape code '"),
            escape.toString()),
            String_new("'")));
          return null;
        }
      }

      end = end + 1;
    }

    return String_append(result, String_slice(text, start, end));
  }

  parsePrefix(mode: ParseKind): Node {
    var token = this.current;

    if (this.peek(TokenKind.IDENTIFIER)) {
      var value = token.range.toString();
      this.advance();
      return createName(value).withRange(token.range);
    }

    if (mode == ParseKind.EXPRESSION) {
      if (this.eat(TokenKind.NULL)) {
        return createNull().withRange(token.range);
      }

      if (this.eat(TokenKind.THIS)) {
        return createThis().withRange(token.range);
      }

      if (this.peek(TokenKind.CHARACTER)) {
        var text = this.parseQuotedString(token.range);
        if (text == null) {
          return null;
        }
        if (String_length(text) != 1) {
          this.log.error(token.range, String_new("Invalid character literal"));
          return null;
        }
        this.advance();
        return createInt(String_get(text, 0)).withRange(token.range);
      }

      if (this.peek(TokenKind.STRING)) {
        var text = this.parseQuotedString(token.range);
        if (text == null) {
          return null;
        }
        this.advance();
        return createString(text).withRange(token.range);
      }

      if (this.peek(TokenKind.INT)) {
        var value = parseInt(token.range);
        this.advance();
        return createInt(value).withRange(token.range);
      }

      if (this.eat(TokenKind.TRUE)) {
        return createBool(true).withRange(token.range);
      }

      if (this.eat(TokenKind.FALSE)) {
        return createBool(false).withRange(token.range);
      }

      if (this.eat(TokenKind.NEW)) {
        var type = this.parseType();
        if (type == null || !this.expect(TokenKind.LEFT_PARENTHESIS)) {
          return null;
        }
        var close = this.current;
        if (!this.expect(TokenKind.RIGHT_PARENTHESIS)) {
          return null;
        }
        return createNew(type).withRange(spanRanges(token.range, close.range));
      }

      if (this.eat(TokenKind.LEFT_PARENTHESIS)) {
        var value = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
        if (value == null || !this.expect(TokenKind.RIGHT_PARENTHESIS)) {
          return null;
        }
        return value;
      }

      // Unary prefix
      if (this.peek(TokenKind.NOT)) return this.parseUnaryPrefix(NodeKind.NOT);
      if (this.peek(TokenKind.MINUS)) return this.parseUnaryPrefix(NodeKind.NEGATIVE);
      if (this.peek(TokenKind.MINUS_MINUS)) return this.parseUnaryPrefix(NodeKind.PREFIX_DECREMENT);
      if (this.peek(TokenKind.PLUS)) return this.parseUnaryPrefix(NodeKind.POSITIVE);
      if (this.peek(TokenKind.PLUS_PLUS)) return this.parseUnaryPrefix(NodeKind.PREFIX_INCREMENT);
      if (this.peek(TokenKind.COMPLEMENT)) return this.parseUnaryPrefix(NodeKind.COMPLEMENT);
    }

    this.unexpectedToken();
    return null;
  }

  parseInfix(precedence: Precedence, node: Node, mode: ParseKind): Node {
    // Dot
    if (this.peek(TokenKind.DOT) && precedence < Precedence.MEMBER) {
      this.advance();

      var name = this.current;
      if (!this.expect(TokenKind.IDENTIFIER)) {
        return null;
      }

      return createDot(node, name.range.toString()).withRange(spanRanges(node.range, name.range)).withInternalRange(name.range);
    }

    if (mode == ParseKind.EXPRESSION) {
      // Binary
      if (this.peek(TokenKind.ASSIGN)) return this.parseBinary(NodeKind.ASSIGN, node, precedence, Precedence.ASSIGN);
      if (this.peek(TokenKind.BITWISE_AND)) return this.parseBinary(NodeKind.BITWISE_AND, node, precedence, Precedence.BITWISE_AND);
      if (this.peek(TokenKind.BITWISE_OR)) return this.parseBinary(NodeKind.BITWISE_OR, node, precedence, Precedence.BITWISE_OR);
      if (this.peek(TokenKind.BITWISE_XOR)) return this.parseBinary(NodeKind.BITWISE_XOR, node, precedence, Precedence.BITWISE_XOR);
      if (this.peek(TokenKind.DIVIDE)) return this.parseBinary(NodeKind.DIVIDE, node, precedence, Precedence.MULTIPLY);
      if (this.peek(TokenKind.EQUAL)) return this.parseBinary(NodeKind.EQUAL, node, precedence, Precedence.EQUAL);
      if (this.peek(TokenKind.GREATER_THAN)) return this.parseBinary(NodeKind.GREATER_THAN, node, precedence, Precedence.COMPARE);
      if (this.peek(TokenKind.GREATER_THAN_EQUAL)) return this.parseBinary(NodeKind.GREATER_THAN_EQUAL, node, precedence, Precedence.COMPARE);
      if (this.peek(TokenKind.LESS_THAN)) return this.parseBinary(NodeKind.LESS_THAN, node, precedence, Precedence.COMPARE);
      if (this.peek(TokenKind.LESS_THAN_EQUAL)) return this.parseBinary(NodeKind.LESS_THAN_EQUAL, node, precedence, Precedence.COMPARE);
      if (this.peek(TokenKind.LOGICAL_AND)) return this.parseBinary(NodeKind.LOGICAL_AND, node, precedence, Precedence.LOGICAL_AND);
      if (this.peek(TokenKind.LOGICAL_OR)) return this.parseBinary(NodeKind.LOGICAL_OR, node, precedence, Precedence.LOGICAL_OR);
      if (this.peek(TokenKind.MINUS)) return this.parseBinary(NodeKind.SUBTRACT, node, precedence, Precedence.ADD);
      if (this.peek(TokenKind.MULTIPLY)) return this.parseBinary(NodeKind.MULTIPLY, node, precedence, Precedence.MULTIPLY);
      if (this.peek(TokenKind.NOT_EQUAL)) return this.parseBinary(NodeKind.NOT_EQUAL, node, precedence, Precedence.EQUAL);
      if (this.peek(TokenKind.PLUS)) return this.parseBinary(NodeKind.ADD, node, precedence, Precedence.ADD);
      if (this.peek(TokenKind.REMAINDER)) return this.parseBinary(NodeKind.REMAINDER, node, precedence, Precedence.MULTIPLY);
      if (this.peek(TokenKind.SHIFT_LEFT)) return this.parseBinary(NodeKind.SHIFT_LEFT, node, precedence, Precedence.SHIFT);
      if (this.peek(TokenKind.SHIFT_RIGHT)) return this.parseBinary(NodeKind.SHIFT_RIGHT, node, precedence, Precedence.SHIFT);

      // Unary postfix
      if (this.peek(TokenKind.PLUS_PLUS)) return this.parseUnaryPostfix(NodeKind.POSTFIX_INCREMENT, node, precedence);
      if (this.peek(TokenKind.MINUS_MINUS)) return this.parseUnaryPostfix(NodeKind.POSTFIX_DECREMENT, node, precedence);

      // Cast
      if (this.eat(TokenKind.AS) && precedence < Precedence.UNARY_PREFIX) {
        var type = this.parseType();
        if (type == null) {
          return null;
        }
        return createCast(node, type).withRange(spanRanges(node.range, type.range));
      }

      // Call
      if (this.peek(TokenKind.LEFT_PARENTHESIS) && precedence < Precedence.UNARY_POSTFIX) {
        var token = this.current;
        this.advance();
        var call = createCall(node);

        if (!this.peek(TokenKind.RIGHT_PARENTHESIS)) {
          while (true) {
            var value = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
            if (value == null) {
              return null;
            }
            call.appendChild(value);

            if (!this.eat(TokenKind.COMMA)) {
              break;
            }
          }
        }

        var close = this.current;
        if (!this.expect(TokenKind.RIGHT_PARENTHESIS)) {
          return null;
        }

        return call.withRange(spanRanges(node.range, close.range)).withInternalRange(spanRanges(token.range, close.range));
      }

      // Hook
      if (this.peek(TokenKind.QUESTION_MARK) && precedence < Precedence.ASSIGN) {
        this.advance();

        var middle = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
        if (middle == null || !this.expect(TokenKind.COLON)) {
          return null;
        }

        var right = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
        if (right == null) {
          return null;
        }

        return createHook(node, middle, right).withRange(spanRanges(node.range, right.range));
      }
    }

    return node;
  }

  parseExpression(precedence: Precedence, mode: ParseKind): Node {
    // Prefix
    var node = this.parsePrefix(mode);
    if (node == null) {
      return null;
    }
    assert(node.range != null);

    // Infix
    while (true) {
      var result = this.parseInfix(precedence, node, mode);
      if (result == null) {
        return null;
      }
      if (result == node) {
        break;
      }
      node = result;
      assert(node.range != null);
    }

    return node;
  }

  parseType(): Node {
    return this.parseExpression(Precedence.UNARY_POSTFIX, ParseKind.TYPE);
  }

  parseIf(): Node {
    var token = this.current;
    assert(token.kind == TokenKind.IF);
    this.advance();

    if (!this.expect(TokenKind.LEFT_PARENTHESIS)) {
      return null;
    }

    var value = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
    if (value == null || !this.expect(TokenKind.RIGHT_PARENTHESIS)) {
      return null;
    }

    var trueBranch = this.parseBody();
    if (trueBranch == null) {
      return null;
    }

    var falseBranch: Node = null;
    if (this.eat(TokenKind.ELSE)) {
      falseBranch = this.parseBody();
      if (falseBranch == null) {
        return null;
      }
    }

    return createIf(value, trueBranch, falseBranch).withRange(spanRanges(
      token.range, (falseBranch != null ? falseBranch : trueBranch).range));
  }

  parseWhile(): Node {
    var token = this.current;
    assert(token.kind == TokenKind.WHILE);
    this.advance();

    if (!this.expect(TokenKind.LEFT_PARENTHESIS)) {
      return null;
    }

    var value = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
    if (value == null || !this.expect(TokenKind.RIGHT_PARENTHESIS)) {
      return null;
    }

    var body = this.parseBody();
    if (body == null) {
      return null;
    }

    return createWhile(value, body).withRange(spanRanges(token.range, body.range));
  }

  parseBody(): Node {
    var node = this.parseStatement();
    if (node == null) {
      return null;
    }

    if (node.kind == NodeKind.BLOCK) {
      return node;
    }

    var block = createBlock();
    block.appendChild(node);
    return block.withRange(node.range);
  }

  parseBlock(): Node {
    var open = this.current;
    if (!this.expect(TokenKind.LEFT_BRACE)) {
      return null;
    }

    var block = createBlock();
    if (!this.parseStatements(block)) {
      return null;
    }

    var close = this.current;
    if (!this.expect(TokenKind.RIGHT_BRACE)) {
      return null;
    }

    return block.withRange(spanRanges(open.range, close.range));
  }

  parseReturn(): Node {
    var token = this.current;
    assert(token.kind == TokenKind.RETURN);
    this.advance();

    var value: Node = null;
    if (!this.peek(TokenKind.SEMICOLON)) {
      value = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
      if (value == null) {
        return null;
      }
    }

    var semicolon = this.current;
    if (!this.expect(TokenKind.SEMICOLON)) {
      return null;
    }

    return createReturn(value).withRange(spanRanges(token.range, semicolon.range));
  }

  parseEmpty(): Node {
    var token = this.current;
    this.advance();
    return createEmpty().withRange(token.range);
  }

  parseEnum(flags: int): Node {
    var token = this.current;
    assert(token.kind == TokenKind.ENUM);
    this.advance();

    var name = this.current;
    if (!this.expect(TokenKind.IDENTIFIER) || !this.expect(TokenKind.LEFT_BRACE)) {
      return null;
    }

    var text = name.range.toString();
    var node = createEnum(text);
    node.flags = flags;

    while (!this.peek(TokenKind.END_OF_FILE) && !this.peek(TokenKind.RIGHT_BRACE)) {
      var member = this.current.range;
      var value: Node = null;

      if (!this.expect(TokenKind.IDENTIFIER)) {
        return null;
      }

      if (this.eat(TokenKind.ASSIGN)) {
        value = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
        if (value == null) {
          return null;
        }
      }

      var variable = createVariable(member.toString(), createName(text), value);
      node.appendChild(variable.withRange(value != null ? spanRanges(member, value.range) : member).withInternalRange(member));

      // Recover from a terminating semicolon
      if (this.peek(TokenKind.SEMICOLON)) {
        this.expect(TokenKind.COMMA);
        this.advance();
      }

      else if (!this.eat(TokenKind.COMMA)) {
        break;
      }
    }

    var close = this.current;
    if (!this.expect(TokenKind.RIGHT_BRACE)) {
      return null;
    }

    return node.withRange(spanRanges(token.range, close.range)).withInternalRange(name.range);
  }

  parseClass(flags: int): Node {
    var token = this.current;
    assert(token.kind == TokenKind.CLASS);
    this.advance();

    var name = this.current;
    if (!this.expect(TokenKind.IDENTIFIER) || !this.expect(TokenKind.LEFT_BRACE)) {
      return null;
    }

    var node = createClass(name.range.toString());
    node.flags = flags;

    while (!this.peek(TokenKind.END_OF_FILE) && !this.peek(TokenKind.RIGHT_BRACE)) {
      var start = this.current;

      if (!this.expect(TokenKind.IDENTIFIER)) {
        return null;
      }

      if (this.peek(TokenKind.LEFT_PARENTHESIS)) {
        this.current = start;
        if (this.parseFunction(0, node) == null) {
          return null;
        }
      }

      else {
        this.current = start;
        if (this.parseVariables(0, node) == null) {
          return null;
        }
      }
    }

    var close = this.current;
    if (!this.expect(TokenKind.RIGHT_BRACE)) {
      return null;
    }

    return node.withRange(spanRanges(token.range, close.range)).withInternalRange(name.range);
  }

  parseFunction(flags: int, parent: Node): Node {
    var token = this.current;

    // Functions inside class declarations don't use "
    if (parent == null) {
      assert(token.kind == TokenKind.FUNCTION);
      this.advance();
    }

    var name = this.current;
    if (!this.expect(TokenKind.IDENTIFIER) || !this.expect(TokenKind.LEFT_PARENTHESIS)) {
      return null;
    }

    var node = createFunction(name.range.toString());
    node.flags = flags;

    if (!this.peek(TokenKind.RIGHT_PARENTHESIS)) {
      while (true) {
        var argument = this.current;
        if (!this.expect(TokenKind.IDENTIFIER) || !this.expect(TokenKind.COLON)) {
          return null;
        }

        var type = this.parseType();
        if (type == null) {
          return null;
        }

        var variable = createVariable(argument.range.toString(), type, null);
        node.appendChild(variable.withRange(spanRanges(argument.range, type.range)).withInternalRange(argument.range));

        if (!this.eat(TokenKind.COMMA)) {
          break;
        }
      }
    }

    if (!this.expect(TokenKind.RIGHT_PARENTHESIS) || !this.expect(TokenKind.COLON)) {
      return null;
    }

    var returnType = this.parseType();
    if (returnType == null) {
      return null;
    }
    node.appendChild(returnType);
    var block: Node = null;

    // Is this an import?
    var semicolon = this.current;
    if (this.eat(TokenKind.SEMICOLON)) {
      block = createEmpty().withRange(semicolon.range);
    }

    // Normal functions
    else {
      block = this.parseBlock();
      if (block == null) {
        return null;
      }
    }

    // Add this to the enclosing class
    if (parent != null) {
      parent.appendChild(node);
    }

    node.appendChild(block);
    return node.withRange(spanRanges(token.range, block.range)).withInternalRange(name.range);
  }

  parseVariables(flags: int, parent: Node): Node {
    var token = this.current;

    // Variables inside class declarations don't use "var"
    if (parent == null) {
      assert(token.kind == TokenKind.VAR || token.kind == TokenKind.CONST);
      this.advance();
    }

    var node = token.kind == TokenKind.CONST ? createConstants() : createVariables();

    while (true) {
      var name = this.current;
      if (!this.expect(TokenKind.IDENTIFIER)) {
        return null;
      }

      var type: Node = null;
      if (this.eat(TokenKind.COLON)) {
        type = this.parseType();
        if (type == null) {
          return null;
        }
      }

      var value: Node = null;
      if (this.eat(TokenKind.ASSIGN)) {
        value = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);
        if (value == null) {
          return null;
        }

        // TODO: Implement constructors
        if (parent != null) {
          this.log.error(value.range, String_new("Inline initialization of instance variables is not supported yet"));
        }
      }

      var range =
        value != null ? spanRanges(name.range, value.range) :
        type != null ? spanRanges(name.range, type.range) :
        name.range;

      var variable = createVariable(name.range.toString(), type, value);
      variable.flags = flags;
      (parent != null ? parent : node).appendChild(variable.withRange(range).withInternalRange(name.range));

      if (!this.eat(TokenKind.COMMA)) {
        break;
      }
    }

    var semicolon = this.current;
    if (!this.expect(TokenKind.SEMICOLON)) {
      return null;
    }

    return node.withRange(spanRanges(token.range, semicolon.range));
  }

  parseLoopJump(kind: NodeKind): Node {
    var token = this.current;
    this.advance();

    if (!this.expect(TokenKind.SEMICOLON)) {
      return null;
    }

    var node = new Node();
    node.kind = kind;
    return node.withRange(token.range);
  }

  parseStatement(): Node {
    var flags = 0;

    if (this.eat(TokenKind.EXTERN)) {
      flags = flags | NODE_FLAG_EXTERN;
    }

    if (this.peek(TokenKind.CONST) || this.peek(TokenKind.VAR)) return this.parseVariables(flags, null);
    if (this.peek(TokenKind.FUNCTION)) return this.parseFunction(flags, null);
    if (this.peek(TokenKind.CLASS)) return this.parseClass(flags);
    if (this.peek(TokenKind.ENUM)) return this.parseEnum(flags);

    // Definition modifiers need to be attached to a definition
    if (flags != 0) {
      this.unexpectedToken();
      return null;
    }

    if (this.peek(TokenKind.LEFT_BRACE)) return this.parseBlock();
    if (this.peek(TokenKind.BREAK)) return this.parseLoopJump(NodeKind.BREAK);
    if (this.peek(TokenKind.CONTINUE)) return this.parseLoopJump(NodeKind.CONTINUE);
    if (this.peek(TokenKind.IF)) return this.parseIf();
    if (this.peek(TokenKind.WHILE)) return this.parseWhile();
    if (this.peek(TokenKind.RETURN)) return this.parseReturn();
    if (this.peek(TokenKind.SEMICOLON)) return this.parseEmpty();

    // Parse an expression statement
    var value = this.parseExpression(Precedence.LOWEST, ParseKind.EXPRESSION);

    if (value == null) {
      return null;
    }

    var semicolon = this.current;
    if (!this.expect(TokenKind.SEMICOLON)) {
      return null;
    }

    return createExpression(value).withRange(spanRanges(value.range, semicolon.range));
  }

  parseStatements(parent: Node): bool {
    while (!this.peek(TokenKind.END_OF_FILE) && !this.peek(TokenKind.RIGHT_BRACE)) {
      var child = this.parseStatement();
      if (child == null) {
        return false;
      }
      parent.appendChild(child);
    }
    return true;
  }
}

function parse(firstToken: Token, log: Log): Node {
  var context = new ParserContext();
  context.current = firstToken;
  context.log = log;

  var global = new Node();
  global.kind = NodeKind.GLOBAL;
  if (!context.parseStatements(global)) {
    return null;
  }
  return global;
}
